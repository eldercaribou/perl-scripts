
=pod

=head1 NAME

Moose::Cookbook::Snack::ArrayRef - (Ab)using the ArrayRef type constraint
provided by the L<Moose::Util::TypeConstraint> and/or
L<Moose::Util::TypeConstraints::OptimizedConstraints> classes.

=head1 SYNOPSIS

    package Fruit;
    use Moose;

    has q(name) => ( is => q(rw), required => 1 );
    has q(species) => ( is => q(rw), required => 1 );

    package ProduceStoreArray;
    use Moose;
    use Moose::Util::TypeConstraints;

    has q(fruit_aisle) => ( is => q(rw), isa => q(ArrayRef) );

    sub show_inventory {
        my @inventory = $store->fruit_aisle;
        foreach my $item ( @inventory ) {
            print qq(Item: ) . blessed $item . qq(\n);
        } # foreach my $item ( @inventory )
    } # sub show_inventory

    package main;
    use Moose; # gains 'blessed' function

    # we need something to put in the fruit aisle
    my $orange = Fruit->new( 
        name => q(orange), species => q(C. sinensis) );
    my $apple = Fruit->new( 
        name => q(apple), species => q(M. domestica) );
    my $store = ProduceStoreArray->new( 
        fruit_aisle => [ \$apple, \$orange ] );

    $store->show_inventory; 

    exit 0;

=head1 DESCRIPTION

The ArrayRef type constraint.

=head2 Assigning arrays to an ArrayRef attribute

=head2 Assigning arrays to an ArrayRef will overwrite existing arrays

=head2 Dumping the contents of an ArrayRef

=head2 Appending values to an ArrayRef

=head2 Clearing an ArrayRef

    # this can also be...
    # has q(fruit_aisle) => ( is => q(rw), isa => q(ArrayRef[Fruit]) );
    # for increased type checking of the contents of the ArrayRef
=head1 SEE ALSO

=over 4

=item L<Moose::Cookbook::Recipe4> - Subtypes, and modeling a simple Company
class hierarchy

=item L<Moose::Util::TypeConstraints> - Type constraints that Moose can use

=back

=head1 AUTHOR

Brian Manning <elspicyjack at gmail dot com>

=head1 COPYRIGHT AND LICENSE

Copyright (c)2008 by Brian Manning

This documentation is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
