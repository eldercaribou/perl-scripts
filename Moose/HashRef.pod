
=pod

=head1 NAME

Moose::Cookbook::Snack::HashRef - (Ab)using the HashRef type constraint
provided by the L<Moose::Util::TypeConstraint> and/or 
L<Moose::Util::TypeConstraints::OptimizedConstraints> classes.

=head1 SYNOPSIS

    package HashDemo;
    use Moose;
    use Moose::Util::TypeConstraints;

    # this attribute is a HashRef
    has 'file' => ( is => 'rw', isa => q(HashRef) );

    package main;
    use Moose;

    my $demo = HashDemo->new( file => { 1 => q(/path/to/some/file) } );
    &dump_hash($demo);
    # prints "My hash is 1:/path/to/some/file"

    # this overwrites the existing hash contents in $demo->file
    $demo->file( { 2 => q(/path/to/file2), 3 => q(/path/to/file3) } );
    &dump_hash($demo);

    exit 0;

    sub dump_hash {
        my $demo = shift; # pop the object reference off of the call stack
        foreach my $key ( keys(%{$demo->file}) ) {
            print qq(this hash key/value pair is $key : ) i
                . $demo->file{$key} . qq(\n);
        } # foreach my $key
    } # sub dump_hash

=head1 DESCRIPTION

The HashRef type constraint.

=head1 SEE ALSO

=over 4

=item L<Moose::Cookbook::Snack::Types> - Snippets of code for using Types and
Type Constraints

=item L<Moose::Util::TypeConstraints> - Type constraints system for Moose

=back

=head1 AUTHOR

Brian Manning <elspicyjack at gmail dot com>

=head1 COPYRIGHT AND LICENSE

Copyright (c)2008 by Brian Manning

This documentation is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
