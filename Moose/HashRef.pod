
=pod

=head1 NAME

Moose::Cookbook::Snack::HashRef - (Ab)using the HashRef type constraint
provided by the L<Moose::Util::TypeConstraint> and/or 
L<Moose::Util::TypeConstraints::OptimizedConstraints> classes.

=head1 SYNOPSIS

    package HashDemo;
    use Moose;
    use Moose::Util::TypeConstraints;

    # this attribute is a HashRef
    has 'files' => ( is => 'rw', isa => q(HashRef) );

    sub dump {
        my $self = shift; 
        foreach my $key ( keys(%{$self->files}) ) {
            print qq(this hash key/value pair is $key : )
                . $self->{file}{$key} . qq(\n);
        } # foreach my $key
    } # sub dump_hash
	
    package main;
    use Moose;

    my $demo = HashDemo->new( files => { 1 => q(/path/to/some/file) } );
	print qq(First dump:\n);
    $demo->dump;
    # prints "My hash is 1:/path/to/some/file"


    exit 0;


=head1 DESCRIPTION

The HashRef type constraint.

=head2 Assigning hashes to a HashRef attribute

=head2 Assigning subsequent HashRefs will overwrite existing ones
    # this replaces the existing HashRef contents
    $demo->files( { 2 => q(/path/to/file2), 3 => q(/path/to/file3) } );
	print qq(Second dump:\n);
    $demo->dump;

=head2 Clearing the HashRef

    # this clears the HashRef
    $demo->files( { } );
	print qq(Third dump:\n);
    $demo->dump;

C<undef> can't be used because of the type constraint set for that attribute.

=head2 Dumping the contents of the HashRef

de-reference the HashRef stored in $self->files and enumerate over it's keys
note that this HashRef contains another hash hence the $object->{hash1}{hash2}
syntax below

=head2 Appending key/value pairs to a HashRef

=head1 SEE ALSO

=over 4

=item L<Moose::Cookbook::Snack::Types> - Snippets of code for using Types and
Type Constraints

=item L<Moose::Util::TypeConstraints> - Type constraints system for Moose

=back

=head1 AUTHOR

Brian Manning <elspicyjack at gmail dot com>

=head1 COPYRIGHT AND LICENSE

Copyright (c)2008 by Brian Manning

This documentation is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
